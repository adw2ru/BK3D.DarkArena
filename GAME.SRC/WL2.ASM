	;
	; UNROLLED DRAW	CODE PREPARE
PREP0:	MOV #UR0,R5
	MOV #64.,R4
	MOV #VSCR+16128.-1.,R3
1$:	MOV #110063,(R5)+	; MOVB R0,X(R3)
	MOV R3,(R5)+
	MOV R3,R1
	ADD #128.,R1
	MOV #110163,(R5)+	; MOVB R1,X(R3)
	MOV R1,(R5)+
	SUB #256.,R3
	SOB R4,1$
	MOV #207,(R5)		; RET
	MOV #DD0,R5
	MOV #64.,R4
	MOV #UR0+504.,R3
2$:	MOV R3,(R5)+
	SUB #8.,R3
	SOB R4,2$
	CALL PREPCF
	RET
	;
	; CEILING&FLOOR	PRECOMPUTE
PREPCF:	MOV #MTRL+10.,R5 ; +8.
	MOV #MTRL+64.,R4
	MOV #32.,R3
1$:	MOV #52525,R2
	MOV (R5),R0
	INC R5
	COM R0
	BIC R0,R2
	MOV R2,(R4)+
	SOB R3,1$
	MOV #MTRL+10.,R5 ; +8.
	MOV #MTRL+64.+64.+64.,R4
	MOV #32.,R3
2$:	MOV #177777,R2
	MOV (R5),R0
	INC R5
	COM R0
	BIC R0,R2
	MOV R2,-(R4)
	SOB R3,2$
	RET
	;
	; PREPARE DRAW 1ST FRAME
PREPR:	MOV #FRBF1,R0
	MOV #256.,R1
1$:	MOV #512.,(R0)+
	SOB R1,1$
	MOV #FRBF3,R0
	MOV #64.,R1
2$:	MOV #64.,(R0)+
	SOB R1,2$
	RET
	;
	; DRAW DIFFERENCE OF 2 FRAMES
DRDIFF:	MOV #64.,R3		; CONST
	MOV #FRBF3,R5		; NEED 256-BYTES ALIGN

5$:	TSTB R5
	BPL 1$

	RET

1$:	CALL SNDF
	MOV (R5)+,R1
	MOV -256.-2.(R5),R2
	ASR R2
	ASR R2
	ASR R2
	BEQ 5$			; CAN'T	BE ZERO
	CMP R2,R3
	BLOS 3$			; MAY BE <0 IF OVERFLOW
	MOV R3,R2
3$:	CMP R1,R2
	BEQ 7$
	BLO 4$

	MOV R2,-2.(R5)		; BHI
	CALL IDRF

7$:	MOV -128.-2.(R5),R0

	BIC MTRL-1(R2),R0	; R2=1..64

	CMP 128.-2.(R5),R0
	BEQ 5$

2$:	MOV R0,128.-2.(R5)

	SUB R2,R3
	SWAB R3
	BISB R5,R3
	ASR R3			; *128

	MOV R0,R1
	BEQ 6$			; DO NOT SWAP 0

	SWAB R1
	TSTB R3
	BPL 6$
	SWAB R0
	SWAB R1
6$:	ASL R2
	CALL @DD0-2(R2)
	MOV #64.,R3		; CONST
	BR 5$

4$:	MOV R2,-2.(R5)
	MOV -128.-2.(R5),R0

	BIC MTRL-1(R2),R0	; R2=1..64

	CMP 128.-2.(R5),R0
	BNE 2$

	CALL IDRW

	BR 5$
	;
	; DRAW CEILING&FLOOR
	; INPUTS: R5(COL),R2(H1),R1(H2)
IDRF:	MOV R2,R4	; PRESERVE R2
	SUB R1,R3
	MOV R3,R0
	ADD #MTRL+64.,R0
	SWAB R3
	BISB R5,R3
	ASR R3
	ADD #VSCR-1.,R3
	SUB R4,R1
	ASL R4
	ADD R1,R4
	MOV R4,ID5+2
	SWAB R4
	ASR R4
	MOV R4,ID5+4
	MOV #128.,R4
ID5:	MOVB 0(R0),0(R3)
	MOVB (R0)+,(R3)
	ADD R4,R3
	SOB R1,ID5
	MOV #64.,R3		; CONST
	RET
	;
	; DRAW COLUMNS
	; INPUTS: R5(COL),R1(H1),R2(H2),R0(M1),R4(M2)
IDRW:	SUB R2,R3
	SWAB R3
	BISB R5,R3
	ASR R3
	ADD #VSCR-1.,R3
	SUB R1,R2
	ASL R1
	ADD R2,R1
	SWAB R1
	ASR R1
	MOV R1,ID4+2

	MOV R0,R4
	BEQ ID2			; DO NOT SWAP 0

	TSTB R3
	BPL ID1
	SWAB R0
	SWAB R4
ID1:	TSTB R1
	BPL ID2
	SWAB R4
ID2:	MOV #128.,R1
ID3:	MOVB R0,(R3)
ID4:	MOVB R4,0(R3)
	SWAB R0
	SWAB R4
	ADD R1,R3
	SOB R2,ID3
	MOV #64.,R3		; CONST
	RET
	;
	; LIGHT	LEVEL TABLE
MTRL:	.WORD 177777,177777
	.WORD 176077,176077,176077
	.WORD 176063,176063
	.WORD 146063,146063,146063
	.WORD 140063,140063,140063
	.WORD 140003,140003,140003
	.WORD 140000,140000,140000,140000,140000
	.WORD 0,0,0,0,0,0,0,0,0,0,0
	;
	; MATERIALS FOR	CEILING&FLOOR
	; (WILL	BE PRECOMPUTED)
	.BLKW 32.
	.BLKW 32.
	;
	; INTERNAL RAY TRACE ROUTINE
	; RETURNS:
	; R0=RAW MATERIAL
	; R2=RAW HEIGHT
	; R4=RAW TYPE
CORE:	CALL SNDF
	MOV R5,-(SP)
	MOV #64.,-(SP)		; CONST
	MOV #DA,R5
	MOV (R5)+,R3		; R3=A1=DA
	BLE S1
	MOV #5201,DDII		; MOV #1.,DDI,INC R1
	MOV (SP),R1
	SUB DU0,R1
	BR S2
S1:	MOV #5301,DDII		; MOV #-1.,DDI,DEC R1
	MOV DU0,R1
	NEG R3			; -A1
S2:	MOV (R5)+,R0		; R0=B1=DB
	BLE S3
	MOV #62701,DDJI		; MOV #16.,DDJ,ADD #16,R1
	MOV (SP),R4
	SUB DV0,R4
	BR S4
S3:	MOV #162701,DDJI	; MOV #-16.,DDJ,SUB #16,R1
	MOV DV0,R4
	NEG R0			; -B1
S4:	MOV R1,(R5)+		; DDX=R1
	MOV R4,(R5)		; DDY=R4
	MOV R0,R5		; R1=U,R4=V,R5=R0=B1
	CALL SPMUL
	MOV R3,R0		; A1
	MOV R4,R1
	MOV R2,R4		; R4 U*=B1
	CALL SPMUL		; R2 V*=A1
	MOV DIJ0,R1		; I0,J0
	; WHILE	LOOP
S5:	MOVB FRCNTR,256.(R1)
	CMP R4,R2		; U>=V
	BLT S6
	; U-V>=0
	ADD (SP),DDY
	SUB R2,R4		; U-=V
	MOV R3,R2		; V=V1
DDJI:	ADD #16.,R1		; J+=DJ	INS.TO CHANGE
	MOVB (R1),R0
	BEQ S5
	MOV R5,R2		; R2=B1
	MOV DDY,R4
	SUB (SP)+,R4
	CALL SPDIV
	MOVB R0,R4		; R4=TYPE
	BIC #177761,R0
	MOV MTRLH(R0),R0
	MOV (SP)+,R5
	RET
	; ELSE
S6:	ADD (SP),DDX
	SUB R4,R2		; V-=U
	MOV R5,R4		; U=U1
DDII:	INC R1			; I+=DI	INS.TO CHANGE
	MOVB (R1),R0
	BEQ S5
	MOV R3,R2		; R2=A1
	MOV DDX,R4
	SUB (SP)+,R4
	CALL SPDIV
	MOVB R0,R4		; R4=TYPE
	COMB R4			; HOR&VER TYPE
	BIC #177761,R0
	MOV MTRLV(R0),R0
	MOV (SP)+,R5
	RET
	;
RENDR:	MOV #DU0,R5		; POINTER TO ALL RENDER	VARS
	MOV SPLX,R0
	MOV R0,(R5)		; DU0
	BIC #177700,(R5)+
	MOV SPLY,R1
	MOV R1,(R5)		; DV0
	BIC #177700,(R5)+
	BIC #77,R1
	ASR R0
	ASR R0
	ASR R0
	ASR R0
	ADD R1,R0
	ASR R0
	ASR R0
	ADD #MAP,R0
	MOV R0,(R5)+		; DIJ0
	MOV SPLA,R0
	ASL R0
	MOV COST(R0),R1
	MOV R1,(R5)+		; DVX
	NEG R1
	MOV R1,(R5)+		; DNY
	MOV R1,R2
	MOV SINT(R0),R1
	MOV R1,(R5)+		; DVY
	MOV R1,(R5)+		; DNX
	; I0,J0,U0,V0,VX,VY,NX,NY ARE SET NOW
	; LET SREEN_WIDTH=64
;	ASR R1
	ASR R1
	ASR R1
	ASR R1
	MOV R1,(R5)+		; DDA
	ASR R1
	MOV R1,(R5)+		; DDA/2
	ASR R1
	MOV R1,(R5)+		; DDA/4
;	ASR R2
	ASR R2
	ASR R2
	ASR R2
	MOV R2,(R5)+		; DDB
	ASR R2
	MOV R2,(R5)+		; DDB/2
	ASR R2
	MOV R2,(R5)+		; DDB/4
	MOV DVX,R1
	MOV DNX,R2
;	ASR R2 ; Q
	SUB R2,R1
	MOV R1,(R5)+		; DA
	MOV DVY,R1
	MOV DNY,R2
;	ASR R2 ; Q
	SUB R2,R1
	MOV R1,(R5)		; DB
	; DA,DB,A,B ARE	SET NOW
	; RENDER LOOP
	MOV #128.-8.,R5
	; 1ST RAY
	CALL CORE
	MOV R2,(PC)+
PREVS:	.WORD 0
	MOV R4,(PC)+
PREVT:	.WORD 0
	; NEXT RAYS
RLP:	ADD DDA,DA
	ADD DDB,DB
	CALL CORE
	CMP PREVT,R4		; SAME OR NOT?
	BNE NSM
	; SAME - INTERPOLATE
	MOV PREVS,R1		; OLD PREVS
	MOV R2,PREVS		; NEW PREVS
	; R4 CAN BE REUSED HERE
	MOV R1,R3		; SAVE R1->R3
	ADD R2,R1
	ASR R1
	MOV R1,R4		; SAVE R1->R4
	ADD R2,R1
	ASR R1
	MOV R2,FRBF1(R5)	; PUT
	MOV R0,FRBF2(R5)	; PUT
	MOV R1,FRBF1+2(R5)	; PUT
	MOV R0,FRBF2+2(R5)	; PUT
	MOV R4,R2		; REST.R4->R2
	MOV R3,R1		; REST.R3->R1
	ADD R2,R1
	ASR R1
	MOV R2,FRBF1+4(R5)	; PUT
	MOV R0,FRBF2+4(R5)	; PUT
	MOV R1,FRBF1+4+2(R5)	; PUT
	MOV R0,FRBF2+4+2(R5)	; PUT
NXR:	SUB #8.,R5
	BGE RLP
	RET
NSM:	; NOT SAME - TRACE ADD.	RAY
	MOV DA,-(SP)
	MOV DB,-(SP)
	MOV R0,-(SP)		; SAVE PREV.MATERIAL
	MOV PREVT,-(SP)
	MOV PREVS,-(SP)
	MOV R2,PREVS		; NEW PREVS
	MOV R4,PREVT		; NEW PREVT
	SUB DDA2,DA
	SUB DDB2,DB
	CALL CORE
	MOV (SP)+,R1
	CMP (SP)+,R4
	BNE NT1
	ADD R2,R1
	ASR R1
	MOV R2,FRBF1+4(R5)	; PUT
	MOV R0,FRBF2+4(R5)	; PUT
	MOV R1,FRBF1+4+2(R5)	; PUT
	MOV R0,FRBF2+4+2(R5)	; PUT
	BR NT2
NT1:	MOV R4,-(SP)
	MOV R2,FRBF1+4(R5)	; PUT
	MOV R0,FRBF2+4(R5)	; PUT
	SUB DDA4,DA
	SUB DDB4,DB
	CALL CORE
	MOV R2,FRBF1+6(R5)	; PUT
	MOV R0,FRBF2+6(R5)	; PUT
	MOV FRBF1+4(R5),R2	; RESTORE
	MOV (SP)+,R4
NT2:	MOV (SP)+,R0		; REST.PREV.MATERIAL
	CMP PREVT,R4
	BNE NT3
	MOV R2,R1
	MOV PREVS,R2
	ADD R2,R1
	ASR R1
	MOV R2,FRBF1(R5)	; PUT
	MOV R0,FRBF2(R5)	; PUT
	MOV R1,FRBF1+2(R5)	; PUT
	MOV R0,FRBF2+2(R5)	; PUT
	BR NT4
NT3:	MOV PREVS,FRBF1(R5)	; PUT
	MOV R0,FRBF2(R5)	; PUT
	MOV (SP),DB
	MOV 2(SP),DA
	SUB DDA4,DA
	SUB DDB4,DB
	CALL CORE
	MOV R2,FRBF1+2(R5)	; PUT
	MOV R0,FRBF2+2(R5)	; PUT
NT4:	MOV (SP)+,DB
	MOV (SP)+,DA
	BR NXR
	;
	; RENDER VARS (DO NOT CHANGE ORDER!)
DU0:	.WORD 0
DV0:	.WORD 0
DIJ0:	.WORD 0
DVX:	.WORD 0
DNY:	.WORD 0
DVY:	.WORD 0
DNX:	.WORD 0
DDA:	.WORD 0
DDA2:	.WORD 0			; DDA/2
DDA4:	.WORD 0			; DDA/4
DDB:	.WORD 0
DDB2:	.WORD 0			; DDB/2
DDB4:	.WORD 0			; DDB/4
DA:	.WORD 0
DB:	.WORD 0
DDX:	.WORD 0
DDY:	.WORD 0
	;
	.END
